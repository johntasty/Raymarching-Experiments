// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

struct Particle
{
    float posX;
    float posY;
    float2 origin;
};
RWStructuredBuffer<Particle> ParticlesBuffer;
float _Time;
float speed;
float dstA = 200;
float gradient;
float size;
float smooth;
[numthreads(1,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
   
    Particle particleCurrent = ParticlesBuffer[id.y];
    float2 pos = float2(particleCurrent.posX, particleCurrent.posY);
    float2 previous = pos;
   
    float move =  abs(speed * _Time);
    
    float2 direction = (pos - particleCurrent.origin);
    float angleDisperse = atan2(direction.y, direction.x);
    // Check if the particle has reached a boundary
    if (pos.x >= 512 || pos.x < 10)
    {
        ParticlesBuffer[id.y].origin = particleCurrent.origin + pos;
        direction = normalize(pos - particleCurrent.origin);

    }    
    pos.x += cos(angleDisperse) * move;
    ParticlesBuffer[id.y].posX = pos.x;
    ParticlesBuffer[id.y].posY = pos.y;

    Result[previous] = float4(0, 0, 0, 1);
    Result[pos] = float4(1, 1, 1, 1);
    
     
}
