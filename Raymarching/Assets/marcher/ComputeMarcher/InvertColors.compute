// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel InvertColors

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWTexture2D<float4> Destination;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;


static const float epsilon = 0.01;

RWStructuredBuffer<float3> shapes;



float2 dimensions;
float _Time;
uint numShapes;
float _radius;
float _Smooth;
float maxDst;
int maxSteps;
float4 positionTest;

const float term1 = 0.1 * 0.1 * 0.1 * (0.1 * (0.1 * 6.0 - 15.0) + 10.0);


float when_Greater(float x, float y)
{
    return max(sign(x - y), 0.0);
}
float when_negative(float x, float y)
{
    return max(sign(y - x), 0.0);
}

struct Ray {
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

float sphIntersect(in float3 ro, in float3 rd, in float3 sph)
{
    float3 oc = ro - sph;
    float b = dot(oc, rd);
    float c = dot(oc, oc) - _radius * _radius;
    float h = b * b - c;
    if (h < 0.0) return -1.0;
    return -b - sqrt(h);
}

//from https://www.iquilezles.org/www/articles/smin/smin.htm
float sdSphere(float3 eye) {
    float m = 0.0;
    float p = 0.0;
    float dmin = 1e6;    
    float h = 1.0;

    for (int i = 0; i < numShapes; i++)
    {
        float db = length(shapes[i] - eye);

        if (db < .3) {
           
            p += 1.0 - term1;
            m += 1.0;           
            h = max(h, .5 * .3);
        }
        else {
           
            dmin = min(dmin, db - .3);
        }

    }
    half d = dmin + .1;

    if (m > 0.5) {
        float th = .2;
        d = h * (th - p);
    }
    
    return d;
}

float map(in float3 p)
{
    return sdSphere(p);
}
half3 Get_Norm(half3 p)
{
    half2 e = half2(0.01, 0);
    half3 n = half3(
        map(p + e.xyy) - map(p - e.xyy),
        map(p + e.yxy) - map(p - e.yxy),
        map(p + e.yyx) - map(p - e.yyx));
    return normalize(n);
}
float2 intersect(in float3 ro, in float3 rd, in float maxDs, in float maxSteps)
{
    float h = epsilon * 2.0;
    float t = 0.0;
    float m = 1.0;
    for (int i = 0; i < maxSteps; i++)
    {
        if (t > maxDs || h < epsilon ) break;
        t += h;
        h = map(ro + rd * t);
    }
    
    if (t > maxDs) m = -1.0;
    return float2(t, m);
}
[numthreads(8, 8, 1)]
void InvertColors(uint3 id : SV_DispatchThreadID)
{
   
    float2 uv = id.xy * dimensions * 2 - 1;
    
    Ray ray = CreateCameraRay(uv);

    // Cache uniform variables
    float radius = _radius;    
    float maxDistance = maxDst;
    float maxStep = maxSteps;
      
    float2 dis = intersect(ray.origin, ray.direction, maxDistance, maxStep);
    if (dis.y > -0.5) {
       
        float3 pos = ray.origin + dis.x * ray.direction;      
        Result[id.xy] = half4(pos, 1);
    }
   
}

