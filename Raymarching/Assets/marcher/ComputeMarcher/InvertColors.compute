// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel InvertColors
#pragma kernel DispatchTest


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWTexture2D<float4> Destination;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;


static const float epsilon = 0.01;

struct Shape {

    float3 position;   
};

RWStructuredBuffer<Shape> shapes;

float _Time;
uint numShapes;
float _radius;
float _Smooth;
float maxDst;
int maxSteps;
float4 positionTest;
struct Ray {
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}


float unionSDF(float distA, float distB, float k) {
    float h = max(k - abs(distA - distB), 0.0) / k;
    return min(distA, distB) - h * h * k * (1.0 / 4.0);
    
}
float sphereMarch(float3 pos, float radius) {
    return length(pos) - radius;
}
//float sphereIntersect(float3 eye, float radius) {
//    float d = length(shapes[0].position - eye) - radius;
//    /*d = length(shapes[0].position - eye) - radius;
//    d = length(shapes[0].position - eye) - radius;*/
//     for (int i = 1; i < numShapes; i++)
//     {
//         float d2 = length(shapes[i].position - eye) - radius;
//         d = min(d, d2);
//     }
//    return d;//length(centre - eye) - radius;
//}
float SphereDistance(float3 ro,float3 rd, float3 center,float radius) {

    float3 oc = ro - center;
    float b = dot(oc, rd);
    float c = dot(oc, oc) - radius * radius;
    float h = b * b - c;
    if (h < 0.0) return -1.0;
    return -b - sqrt(h);
}
inline float3 Mod(float3 a, float3 b)
{
    return frac(abs(a / b)) * abs(b);
}
inline float3 Repeat(float3 pos, float3 span)
{  
    float3 q = pos  - _Smooth * clamp(round(pos / _Smooth), -span, span);
    return q;
}
float dist(float3 pos) {
    float3 position = shapes[0].position - pos;
    float3 repeater = Repeat(position, float3(numShapes, numShapes, numShapes));
    return sphereMarch(repeater, _radius);
}
half GetDist(half3 pos)
{
   /* float t = 1e20;
    float id = -1.0;
   
    for (int i = 0; i < numShapes; i++)
    {
        vec4 sph = sphere[i];
        float h = SphereDistance(ro, rd, shapes[i].position, _radius);
        if (h > 0.0 && h < t)
        {
            t = h;
            obj = sph;
            id = float(i);
        }
    }

    if (id > -0.5)
    {
        vec3 pos = ro + t * rd;
        vec3 nor = sphNormal(pos, obj);
        col = shade(rd, pos, nor, id, obj);
    }*/
        
}
//half4 GetDistance(half3 ro, half3 rd)
//{
//    float t = 1e20;
//    float id = -1.0;
//    float4 result = float4(0, 0, 0, 0);
//    float h = 1.0;
//    for (int i = 0; i < numShapes; i++)
//    {
//        half3 sph = shapes[i].position;
//        h = SphereDistance(ro, rd, sph, _radius);
//        if (h > 0.0 && h < t)
//        {
//            t = h;            
//            id = float(i);
//        }
//    }
//
//   
//    if (id > -0.5)
//    {       
//        float rayDst = 0;       
//        for (int j = 0; j < maxSteps; i++) {
//            
//            if (rayDst > maxDst) {
//                return result = half4(0, 0, 0, 0);
//                break;
//            }
//            float3 pointOnSurface = ro + t * rd;
//            rayDst += h;
//            if (h <= epsilon) {
//                
//                //float3 norm = Get_Norm(pointOnSurface - rayDirection * epsilon);
//
//                float perf = (float)i / maxSteps;
//                float3 red = float3(1, 0, 0);
//                float3 blue = float3(0, 0, 1);
//                return result = float4(lerp(blue, red, perf), 0);
//                break;
//            }
//                        
//        }
//    }
//  
//    return result;
//}
//half3 Get_Norm(half3 p)
//{
//    half2 e = half2(0.001, 0);
//    half3 n = half3(
//        GetDist(p + e.xyy) - GetDist(p - e.xyy),
//        GetDist(p + e.yxy) - GetDist(p - e.yxy),
//        GetDist(p + e.yyx) - GetDist(p - e.yyx));
//    return normalize(n);
//}

//float4 Raymacher(float3 rayOrigin, float3 rayDirection) {
//    float rayDst = 0;
//    float4 result = float4(0, 0, 0, 0);
//    //float dst = 0;
//    for (int i = 0; i < maxSteps; i++)
//    {
//       
//        float dst = sphereIntersect(rayOrigin, _radius);
//        if (rayDst > maxDst) {
//
//            float3 red = float3(1, 0, 0);
//            float3 blue = float3(0, 0, 1);
//            float perf = (float)i / maxSteps;
//
//            return result = float4(lerp(blue, red, perf), 0);
//            break;
//        }
//        if (dst <= epsilon) {
//            float3 pointOnSurface = rayOrigin + rayDirection * dst;
//            float3 norm = Get_Norm(pointOnSurface - rayDirection * epsilon);
//
//            float perf = (float)i / maxSteps;
//            float3 red = float3(1, 0, 0);
//            float3 blue = float3(0, 0, 1);
//            return result = float4(lerp(blue, red, perf), 0);
//            break;
//        }
//        rayOrigin += rayDirection * dst;
//        rayDst += dst;
//       
//        /*float dst = GetDist(rayOrigin);
//        
//        if (rayDst > maxDst) {
//
//            float3 red = float3(1, 0, 0);
//            float3 blue = float3(0, 0, 1);
//            float perf = (float)i / maxSteps;
//
//            return result = float4(lerp(blue, red, perf), 0);
//            break;
//        }
//        if (dst <= epsilon) {
//            float3 pointOnSurface = rayOrigin + rayDirection * dst;
//            float3 norm = Get_Norm(pointOnSurface - rayDirection * epsilon);
//
//            float perf = (float)i / maxSteps;
//            float3 red = float3(1, 0, 0);
//            float3 blue = float3(0, 0, 1);
//            return result = float4(lerp(blue, red, perf), 0);
//            break;
//        }
//        rayOrigin += rayDirection * dst;
//        rayDst += dst;*/
//    }
//   
//    return result;
//}
float when_Greater(float x, float y) 
{
    return max(sign(x - y), 0.0);
}
float when_negative(float x, float y)
{
    return max(sign(y - x), 0.0);
}
float andOp(float x, float y) 
{
    return x * y;
}

[numthreads(8, 8, 1)]
void InvertColors(uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);

    float2 uv = id.xy / float2(width, height) * 2 - 1;
    float rayDst = 0;

    Ray ray = CreateCameraRay(uv);
    int marchSteps = 0;
    
    float t = 1e20;
  
    float idx = -1.0;
    float3 obj = float3(0, 0, 0);
    float h = 1.0;
    float x = 0.;
    for (uint i = 0; i < numShapes; i++)
    {
       
        half3 sph = shapes[i].position;
        h = SphereDistance(ray.origin, ray.direction, sph, _radius);
       
        float condition = when_Greater(h, 0.0);
        float condition2 = when_negative(h, t);

        t = lerp(t, h, condition * condition2);
        idx = lerp(idx, float(i), condition * condition2);
              
        ////x = lerp(0, float(i),);
       /* if ((condition * condition2) == 1.0)
        {          
            t = h;            
           idx = float(i);
        }*/

    }
  
    float3 position = ray.origin + t * ray.direction;
    float3 blue = normalize(position);
    float3 results = lerp(Result[id.xy], blue, when_Greater(idx, -0.5));
    //Result[id.xy] = float4(results, 0);
       
}
[numthreads(8, 8, 1)]
void DispatchTest(uint3 id : SV_DispatchThreadID)
{
    Destination[id.xy] = Result[id.xy];
}
