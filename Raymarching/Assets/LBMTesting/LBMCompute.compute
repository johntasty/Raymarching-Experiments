// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel Stream
#pragma kernel Tracers


#define four9ths 4.0 / 9.0
#define one9th   1.0 / 9.0
#define one36th  1.0 / 36.0

//starting velocity
//TODO
//Sim breaks if its to high
#define VEL .2
// Definition of D2Q9 lattice
    /*
    6   2   5
      \ | /
    3 - 0 - 1
      / | \
    7   4   8
    */
// Define a constant array

//Visualization
RWTexture2D<float4> Result;
//Heightmap Texture 
RWTexture2D<float4> HeightTexture;

RWTexture2D<float4> Velocities;
//Terrain texture
RWTexture2D<float4> InputTexture;


struct PixelData {

    float n0;
    float northE;
    float northW;
    float northN;
    float northS;
    float northNE;
    float northNW;
    float northSE;
    float northSW;
    float velX;
    float velY;
    float rho;
};
RWStructuredBuffer<PixelData> gridBuffer;

struct VelocityData {
    float posX;
    float posY;
};
RWStructuredBuffer<VelocityData> VelocitiesBuffer;


float _VelocityCap;
float _Contrast;
float viscosity;
float _RelaxationTime;
float _Time;

void SetEquilibrium(int id, float velX, float velY, float density) {

    PixelData gridSquare = gridBuffer[id];

    float rho = density;

    float ux3 = 3 * velX;
    float uy3 = 3 * velY;
    float ux2 = velX * velX;
    float uy2 = velY * velY;

    float uxuy2 = 2 * velX * velY;
    float u2 = ux2 + uy2;
    float u215 = 1.5 * u2;


    gridSquare.n0 = four9ths * rho * (1 - u215);
    gridSquare.northE = one9th * rho * (1 + ux3 + 4.5 * ux2 - u215);
    gridSquare.northW = one9th * rho * (1 - ux3 + 4.5 * ux2 - u215);
    gridSquare.northN = one9th * rho * (1 + uy3 + 4.5 * uy2 - u215);
    gridSquare.northS = one9th * rho * (1 - uy3 + 4.5 * uy2 - u215);

    gridSquare.northNE = one36th * rho * (1 + ux3 + uy3 + 4.5 * (u2 + uxuy2) - u215);
    gridSquare.northSE = one36th * rho * (1 + ux3 - uy3 + 4.5 * (u2 - uxuy2) - u215);
    gridSquare.northNW = one36th * rho * (1 - ux3 + uy3 + 4.5 * (u2 - uxuy2) - u215);
    gridSquare.northSW = one36th * rho * (1 - ux3 - uy3 + 4.5 * (u2 + uxuy2) - u215);

    gridBuffer[id] = gridSquare;

}
void SetZeroes(int id) {
    PixelData gridSquare = gridBuffer[id];

    gridSquare.n0      = 0;
    gridSquare.northE  = 0;
    gridSquare.northW  = 0;
    gridSquare.northN  = 0;
    gridSquare.northS  = 0;
                        
    gridSquare.northNE = 0;
    gridSquare.northSE = 0;
    gridSquare.northNW = 0;
    gridSquare.northSW = 0;

    gridBuffer[id] = gridSquare;

}
bool is_wall(float tex, float2 cell, float2 size) {
    return (size.x < cell.x + 1) || (size.y < cell.y + 1) || (cell.x < 0) || (cell.y < 0) || (tex > 0.05);
}
//Initiallize fluid
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
   
    int height, width;
    Result.GetDimensions(width, height);

    // Access the grid square in the buffer
    int index = id.y * width + id.x;   
    PixelData gridSquare = gridBuffer[index];

    float4 color = InputTexture[id.xy];
    float normalizedGrayscale = color.r;

    SetEquilibrium(index, VEL, 0., 1.);
    

    Result[id.xy] = float4(VEL, 0, 1., 1.);
    Velocities[id.xy] = float4(VEL, 0., 1., 1.);
}


[numthreads(8, 8, 1)]
void Stream(uint3 id : SV_DispatchThreadID)
{
    int height, width;
    Result.GetDimensions(width, height);
    int xDim = id.x;
    int yDim = id.y;

    float4 color = InputTexture[id.xy];
    float normalizedGrayscale = color.r;
    // Get the index of the current grid square
    int CurrentCell = id.y * width + id.x;
    // Access the grid square in the buffer
    PixelData gridSquare = gridBuffer[CurrentCell];
    //===Collision Step===    
    float rho, xVel, yVel, relaxation, viscos;
    relaxation = _RelaxationTime;
    viscos = viscosity;

   

    if (id.x == 0 || id.x == width)
    {
        SetEquilibrium(CurrentCell, VEL, 0, 1.);
    }
    if (id.y == 0 || id.y == height)
    {
        SetEquilibrium(CurrentCell, VEL, 0, 1.);
    }
    
    int xplus = ((id.x == width - 1) ? (0) : (id.x + 1));
    int xminus = ((id.x == 0) ? (width - 1) : (id.x - 1));
    int yplus = ((id.y == height - 1) ? (0) : (id.y + 1));
    int yminus = ((id.y == 0) ? (height - 1) : (id.y - 1));
    //grab neighbors
    int NeighborRight = id.y * width + xplus;
    int NeighborLeft = id.y * width + xminus;
    int NeighborUp = yplus * width + id.x;
    int NeighborDown = yminus * width + id.x;
    int NeighborUpRight = yplus * width + xplus;
    int NeighborUpLeft = yplus * width + xminus;
    int NeighborDownRight = yminus * width + xplus;
    int NeighborDownLeft = yminus * width + xminus;

   //=======Collision Step=======
    float2 size = float2(512, 512);
    for (int i = 0; i < 4; i++)
    {        
        rho = gridSquare.n0 + gridSquare.northN + gridSquare.northS + gridSquare.northE +
            gridSquare.northW + gridSquare.northNW + gridSquare.northNE + gridSquare.northSW + gridSquare.northSE;
        gridSquare.rho = rho;
        //velocity
        xVel = (gridSquare.northE + gridSquare.northNE + gridSquare.northSE -
            gridSquare.northW - gridSquare.northNW - gridSquare.northSW) / rho;
        gridSquare.velX = xVel;
        yVel = (gridSquare.northN + gridSquare.northNE + gridSquare.northNW -
            gridSquare.northS - gridSquare.northSE - gridSquare.northSW) / rho;
        gridSquare.velY = yVel;
        //velocity cap for stability
        float norm = sqrt(xVel * xVel + yVel * yVel);
        if (norm > _VelocityCap)
        {
            xVel *= _VelocityCap / norm;
            yVel *= _VelocityCap / norm;
        }


        //dencities

        float one9thn = one9th * rho;
        float one36thn = one36th * rho;

        //velocities 
        float vx3 = 3 * xVel;
        float vy3 = 3 * yVel;
        float vx2 = xVel * xVel;
        float vy2 = yVel * yVel;

        float vxvy2 = 2 * xVel * yVel;
        float v2 = vx2 + vy2;
        float v215 = 1.5 * v2;

        float omega = 1 / (relaxation * viscos + .5);		// reciprocal of relaxation time

        gridSquare.n0 += omega * (four9ths * rho * (1 - v215) - gridSquare.n0);

        gridSquare.northE += omega * (one9thn * (1 + vx3 + 4.5 * vx2 - v215) - gridSquare.northE);
        gridSquare.northW += omega * (one9thn * (1 - vx3 + 4.5 * vx2 - v215) - gridSquare.northW);
        gridSquare.northN += omega * (one9thn * (1 + vy3 + 4.5 * vy2 - v215) - gridSquare.northN);
        gridSquare.northS += omega * (one9thn * (1 - vy3 + 4.5 * vy2 - v215) - gridSquare.northS);

        gridSquare.northNE += omega * (one36thn * (1 + vx3 + vy3 + 4.5 * (v2 + vxvy2) - v215) - gridSquare.northNE);
        gridSquare.northSE += omega * (one36thn * (1 + vx3 - vy3 + 4.5 * (v2 - vxvy2) - v215) - gridSquare.northSE);
        gridSquare.northNW += omega * (one36thn * (1 - vx3 + vy3 + 4.5 * (v2 - vxvy2) - v215) - gridSquare.northNW);
        gridSquare.northSW += omega * (one36thn * (1 - vx3 - vy3 + 4.5 * (v2 + vxvy2) - v215) - gridSquare.northSW);
        //add data back
        gridBuffer[CurrentCell] = gridSquare;
        //=== STREAMING STEP =======================
        

        PixelData NeighBorUp = gridBuffer[NeighborUp];
        PixelData NeighBorDow = gridBuffer[NeighborDown];
        PixelData NeighBorRight = gridBuffer[NeighborRight];
        PixelData NeighBorLeft = gridBuffer[NeighborLeft];

        PixelData NeighBorUpRight = gridBuffer[NeighborUpRight];
        PixelData NeighBorUpLeft = gridBuffer[NeighborUpLeft];
        PixelData NeighBorDownLeft = gridBuffer[NeighborDownLeft];
        PixelData NeighBorDowRi = gridBuffer[NeighborDownRight];

        if (id.x == width && id.y < height - 2) {

            gridSquare.northW = NeighBorLeft.northW;
            gridSquare.northNW = NeighBorLeft.northW;
            gridSquare.northSW = NeighBorLeft.northW;
            gridBuffer[CurrentCell] = gridSquare;
        }
       
        //stream directions
        if (id.x < width - 1 ) {
            gridSquare.northN = is_wall(normalizedGrayscale, id.xy,  size) ? gridSquare.northS : NeighBorDow.northN;
            gridSquare.northNW = is_wall(normalizedGrayscale, id.xy, size) ? gridSquare.northNE : NeighBorDowRi.northNW;

            gridSquare.northE  = is_wall(normalizedGrayscale, id.xy, size) ? gridSquare.northW : NeighBorLeft.northE;
            gridSquare.northNE = is_wall(normalizedGrayscale, id.xy, size) ? gridSquare.northNW : NeighBorDownLeft.northNE;
                                 
            gridSquare.northS  = is_wall(normalizedGrayscale, id.xy, size) ? gridSquare.northN : NeighBorUp.northS;
            gridSquare.northSE = is_wall(normalizedGrayscale, id.xy, size) ? gridSquare.northSW : NeighBorUpLeft.northSE;
                                
            gridSquare.northW  = is_wall(normalizedGrayscale, id.xy, size) ? gridSquare.northE : NeighBorRight.northW;
            gridSquare.northSW = is_wall(normalizedGrayscale, id.xy, size) ? gridSquare.northSE : NeighBorUpRight.northSW;

            gridBuffer[CurrentCell] = gridSquare;
        }       

        /*if (normalizedGrayscale > .05) {

         
            NeighBorRight.northE     = gridSquare.northW;
            NeighBorLeft.northW      = gridSquare.northE;
            NeighBorUp.northN        = gridSquare.northS;
            NeighBorDow.northS       = gridSquare.northN;

            NeighBorUpRight.northNE  = gridSquare.northSW;
            NeighBorUpLeft.northNW   = gridSquare.northSE;
            NeighBorDowRi.northSE    = gridSquare.northNW;
            NeighBorDownLeft.northSW = gridSquare.northNE;

            gridBuffer[NeighborUp] = NeighBorUp;
            gridBuffer[NeighborDown] = NeighBorDow;
            gridBuffer[NeighborRight] = NeighBorRight;
            gridBuffer[NeighborLeft] = NeighBorLeft;

            gridBuffer[NeighborUpRight] = NeighBorUpRight;
            gridBuffer[NeighborUpLeft] = NeighBorUpLeft;
            gridBuffer[NeighborDownLeft] = NeighBorDownLeft;
            gridBuffer[NeighborDownRight] = NeighBorDowRi;

        }*/
        Velocities[id.xy] = float4(xVel, yVel, 1., 1.);
    }    
   
    float3 colorVel;
    if (normalizedGrayscale > .01) {
        colorVel.xyz = float3(xVel, yVel, 0);
    }
    else {
        float contrast = 2 * pow(1.2, _Contrast) + .5;
        float normal_value = sqrt(xVel * xVel + yVel * yVel) * contrast;
        normal_value = normal_value / 0.2;

        if (normal_value < 0.0) normal_value = 0.0;
        if (normal_value > 1.0) normal_value = 1.0;

        float v1 = 1.0 / 7.0;
        float v2 = 2.0 / 7.0;
        float v3 = 3.0 / 7.0;
        float v4 = 4.0 / 7.0;
        float v5 = 5.0 / 7.0;
        float v6 = 6.0 / 7.0;
        //compute color
        if (normal_value < v1)
        {
            float c = normal_value / v1;
            colorVel.x = 70. * (1. - c);
            colorVel.y = 70. * (1. - c);
            colorVel.z = 219. * (1. - c) + 91. * c;
        }
        else if (normal_value < v2)
        {
            float c = (normal_value - v1) / (v2 - v1);
            colorVel.x = 0.;
            colorVel.y = 255. * c;
            colorVel.z = 91. * (1. - c) + 255. * c;
        }
        else if (normal_value < v3)
        {
            float c = (normal_value - v2) / (v3 - v2);
            colorVel.x = 0. * c;
            colorVel.y = 255. * (1. - c) + 128. * c;
            colorVel.z = 255. * (1. - c) + 0. * c;
        }
        else if (normal_value < v4)
        {
            float c = (normal_value - v3) / (v4 - v3);
            colorVel.x = 255. * c;
            colorVel.y = 128. * (1. - c) + 255. * c;
            colorVel.z = 0.;
        }
        else if (normal_value < v5)
        {
            float c = (normal_value - v4) / (v5 - v4);
            colorVel.x = 255. * (1. - c) + 255. * c;
            colorVel.y = 255. * (1. - c) + 96. * c;
            colorVel.z = 0.;
        }
        else if (normal_value < v6)
        {
            float c = (normal_value - v5) / (v6 - v5);
            colorVel.x = 255. * (1. - c) + 107. * c;
            colorVel.y = 96. * (1. - c);
            colorVel.z = 0.;
        }
        else
        {
            float c = (normal_value - v6) / (1. - v6);
            colorVel.x = 107. * (1. - c) + 223. * c;
            colorVel.y = 77. * c;
            colorVel.z = 77. * c;
        }
       
    }

    float4 res = float4((colorVel.r / 255), (colorVel.g / 255), (colorVel.b / 255), 1.0);
    //float4 res = float4(xVel * 5 + 0.5f, yVel * 5 + 0.5f, 0, 1.0);  
   
    Result[id.xy] = res;

       
}


// Hash function from H. Schechter & R. Bridson, goo.gl/RXiKaH
uint Hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

float Random(uint seed)
{
    return float(Hash(seed)) / 4294967295.0; // 2^32-1
}
float amplitude;

[numthreads(1, 8, 1)]
void Tracers(uint3 id : SV_DispatchThreadID)
{  
    //TODO fix barrier collsiions, sometimes particles pass through
   
    for (int i = 0; i < 1; i++)
    {
        
        VelocityData particle = VelocitiesBuffer[id.y];
        float2 prevPos = float2(particle.posX, particle.posY);
        float2 pos = prevPos;
        float2 vel = Velocities[pos].rg;
               
        pos += vel;
        float2 p = (pos - float2(512, 512)) / 512;
        if (pos.x > 512) { pos.x = 0; pos.y = Random(id.y) * 512; }
        if (pos.y > 512) { pos.x = 0; pos.y = Random(id.y) * 512; }
        if (pos.y < 0) { pos.x = 0; pos.y = Random(id.y) * 512; }
       
        VelocitiesBuffer[id.y].posX = pos.x;
        VelocitiesBuffer[id.y].posY = pos.y;

        float dist = length(p) - 10;
        if (dist < 0) {
            float3 color = float3(1, 1, 1) * amplitude; 
            HeightTexture[prevPos] = float4(0, 0, 0, 1);
            HeightTexture[pos] = float4(color, 1);
                        
        }
       
    }
          
}
