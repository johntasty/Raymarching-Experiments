// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#pragma kernel Stream
#pragma kernel Tracers
#pragma kernel CSClear


#define four9ths 4.0 / 9.0
#define one9th   1.0 / 9.0
#define one36th  1.0 / 36.0

//starting velocity

// Definition of D2Q9 lattice
    /*
    6   2   5
      \ | /
    3 - 0 - 1
      / | \
    7   4   8
    */
// Define a constant array

//Visualization
RWTexture2D<float4> Result;
//Heightmap Texture 
RWTexture2D<float4> HeightTexture;
RWTexture2D<float4> Velocities;
//Terrain texture
Texture2D<float4> InputTexture;


struct PixelData {

    float n0;
    float northE;
    float northW;
    float northN;
    float northS;
    float northNE;
    float northNW;
    float northSE;
    float northSW;
    float velX;
    float velY;
    float rho;
};
RWStructuredBuffer<PixelData> gridBuffer;

struct VelocityData {
    float2 origin;        
};
RWStructuredBuffer<VelocityData> VelocitiesBuffer;


float _VelocityCap;
float _VelocityS;
float _Contrast;
float viscosity;
float _RelaxationTime;
float _Time;

float _Height;

bool _Bounce = true;
float mod(float k, float n) { return ((k %= n) < 0) ? k + n : k; }
void SetEquilibrium(int id, float velX, float velY, float density) {

    float rho = density;

    float ux3 = 3 * velX;
    float uy3 = 3 * velY;
    float ux2 = velX * velX;
    float uy2 = velY * velY;

    float uxuy2 = 2 * velX * velY;
    float u2 = ux2 + uy2;
    float u215 = 1.5 * u2;


    gridBuffer[id].n0 = four9ths * rho * (1 - u215);
    gridBuffer[id].northE = one9th * rho * (1 + ux3 + 4.5 * ux2 - u215);
    gridBuffer[id].northW = one9th * rho * (1 - ux3 + 4.5 * ux2 - u215);
    gridBuffer[id].northN = one9th * rho * (1 + uy3 + 4.5 * uy2 - u215);
    gridBuffer[id].northS = one9th * rho * (1 - uy3 + 4.5 * uy2 - u215);

    gridBuffer[id].northNE = one36th * rho * (1 + ux3 + uy3 + 4.5 * (u2 + uxuy2) - u215);
    gridBuffer[id].northSE = one36th * rho * (1 + ux3 - uy3 + 4.5 * (u2 - uxuy2) - u215);
    gridBuffer[id].northNW = one36th * rho * (1 - ux3 + uy3 + 4.5 * (u2 - uxuy2) - u215);
    gridBuffer[id].northSW = one36th * rho * (1 - ux3 - uy3 + 4.5 * (u2 + uxuy2) - u215);
           
}
void SetZeroes(int id) {
    PixelData gridSquare = gridBuffer[id];

    gridSquare.n0      = 0;
    gridSquare.northE  = 0;
    gridSquare.northW  = 0;
    gridSquare.northN  = 0;
    gridSquare.northS  = 0;
                        
    gridSquare.northNE = 0;
    gridSquare.northSE = 0;
    gridSquare.northNW = 0;
    gridSquare.northSW = 0;

    gridBuffer[id] = gridSquare;

}
bool is_wall(float tex, float2 cell) {    
    return  (tex * 2. > _Height);
}
//Initiallize fluid
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{   
    int height, width;
    Result.GetDimensions(width, height);

    // Access the grid square in the buffer
    int index = id.y * width + id.x;   
    SetEquilibrium(index, 0, 0., 0.01);
    float4 color = InputTexture[id.xy];
    float normalizedGrayscale = color.r;
    /*if (is_wall(normalizedGrayscale, id.xy)) {
        SetZeroes(index);
    }*/

    Result[id.xy] = float4(0, 0, 1., 1.);
    Velocities[id.xy] = float4(0, 0., 1., 1.);  
}

[numthreads(8, 8, 1)]
void Stream(uint3 id : SV_DispatchThreadID)
{
    int height, width;
    Result.GetDimensions(width, height);
   
    // Get the index of the current grid square
    int CurrentCell = id.y * width + id.x;

    float normalizedGrayscale = InputTexture[id.xy].r;

    if (id.x == 0 && normalizedGrayscale < _Height) {
        SetEquilibrium(CurrentCell, _VelocityS, 0., 1.);
    }
   
    // Access the grid square in the buffer
    PixelData gridSquare = gridBuffer[CurrentCell];
       
    int xplus  = (id.x + 1);
    int xminus = (id.x - 1);
    int yplus = (id.y + 1);
    int yminus = (id.y - 1);
    //grab neighbors
    int NeighborRight = id.y * width + xplus;
    int NeighborLeft = id.y * width + xminus;
    int NeighborUp = yplus * width + id.x;
    int NeighborDown = yminus * width + id.x;
    int NeighborUpRight = yplus * width + xplus;
    int NeighborUpLeft = yplus * width + xminus;
    int NeighborDownRight = yminus * width + xplus;
    int NeighborDownLeft = yminus * width + xminus;


    float rho, xVel, yVel, relaxation, viscos;
    relaxation = _RelaxationTime;
    viscos = viscosity;
   //=======Collision Step=======
    rho = gridSquare.n0 + gridSquare.northN + gridSquare.northS + gridSquare.northE +
        gridSquare.northW + gridSquare.northNW + gridSquare.northNE + gridSquare.northSW + gridSquare.northSE;
   
    gridBuffer[CurrentCell].rho = rho;
    float rhoInv = 1. / rho;
    //velocity
    xVel = rhoInv * (gridSquare.northE + gridSquare.northNE + gridSquare.northSE -
        gridSquare.northW - gridSquare.northNW - gridSquare.northSW);
    gridBuffer[CurrentCell].velX = xVel;
    yVel = rhoInv * (gridSquare.northN + gridSquare.northNE + gridSquare.northNW -
        gridSquare.northS - gridSquare.northSE - gridSquare.northSW);
    gridBuffer[CurrentCell].velY = yVel;
    //velocity cap for stability
    float norm = sqrt(xVel * xVel + yVel * yVel);
    if (norm > _VelocityCap)
    {
        xVel *= _VelocityCap / norm;
        yVel *= _VelocityCap / norm;

    }
  
    //density
    float one9thn = one9th * rho;
    float one36thn = one36th * rho;
    
    //velocities 
    float vx3 = 3 * xVel;
    float vy3 = 3 * yVel;
    float vx2 = xVel * xVel;
    float vy2 = yVel * yVel;

    float vxvy2 = 2 * xVel * yVel;
    float v2 = vx2 + vy2;
    float v215 = 1.5 * v2;

    float omega = 1 / (relaxation * viscos + .5);		// reciprocal of relaxation time


    gridBuffer[CurrentCell].n0     += omega * (four9ths * rho * (1 - v215) - gridBuffer[CurrentCell].n0);

    gridBuffer[CurrentCell].northE += omega * (one9thn * (1 + vx3 + 4.5 * vx2 - v215) - gridBuffer[CurrentCell].northE);
    gridBuffer[CurrentCell].northW += omega * (one9thn * (1 - vx3 + 4.5 * vx2 - v215) - gridBuffer[CurrentCell].northW);
    gridBuffer[CurrentCell].northN += omega * (one9thn * (1 + vy3 + 4.5 * vy2 - v215) - gridBuffer[CurrentCell].northN);
    gridBuffer[CurrentCell].northS += omega * (one9thn * (1 - vy3 + 4.5 * vy2 - v215) - gridBuffer[CurrentCell].northS);

    gridBuffer[CurrentCell].northNE += omega * (one36thn * (1 + vx3 + vy3 + 4.5 * (v2 + vxvy2) - v215) - gridBuffer[CurrentCell].northNE);
    gridBuffer[CurrentCell].northSE += omega * (one36thn * (1 + vx3 - vy3 + 4.5 * (v2 - vxvy2) - v215) - gridBuffer[CurrentCell].northSE);
    gridBuffer[CurrentCell].northNW += omega * (one36thn * (1 - vx3 + vy3 + 4.5 * (v2 - vxvy2) - v215) - gridBuffer[CurrentCell].northNW);
    gridBuffer[CurrentCell].northSW += omega * (one36thn * (1 - vx3 - vy3 + 4.5 * (v2 + vxvy2) - v215) - gridBuffer[CurrentCell].northSW);
      
    //=== STREAMING STEP =======================     
    if (!_Bounce) {
        if (id.x == width - 1) {
            gridBuffer[CurrentCell].northNW = gridBuffer[NeighborLeft].northNW;
            gridBuffer[CurrentCell].northW = gridBuffer[NeighborLeft].northW;
            gridBuffer[CurrentCell].northSW = gridBuffer[NeighborLeft].northSW;
        }
    }    
    if (id.x < width - 1 && id.y < width - 1 ) {
        //stream directions
        gridBuffer[CurrentCell].northN  = gridBuffer[NeighborDown].northN;
        gridBuffer[CurrentCell].northNW = gridBuffer[NeighborDownRight].northNW;

        gridBuffer[CurrentCell].northE  = gridBuffer[NeighborLeft].northE;
        gridBuffer[CurrentCell].northNE = gridBuffer[NeighborDownLeft].northNE;
        
        gridBuffer[CurrentCell].northS  = gridBuffer[NeighborUp].northS;
        gridBuffer[CurrentCell].northSE = gridBuffer[NeighborUpLeft].northSE;

        gridBuffer[CurrentCell].northW  = gridBuffer[NeighborRight].northW;
        gridBuffer[CurrentCell].northSW = gridBuffer[NeighborUpRight].northSW;
        
    }
   
    //free slip boundary condition, i think...
    
    if (id.y == 0) {
        gridBuffer[CurrentCell].northN = gridBuffer[CurrentCell].northS;
        gridBuffer[CurrentCell].northNW = gridBuffer[CurrentCell].northSE + 6. * one36th * rho * 0.;
        gridBuffer[CurrentCell].northNE = gridBuffer[CurrentCell].northSW - 6. * one36th * rho * 0.;
          
    }
    if (id.y == width - 2)
    {
        gridBuffer[CurrentCell].northS = gridBuffer[CurrentCell].northN;
        gridBuffer[CurrentCell].northSE = gridBuffer[CurrentCell].northNW - 6. * one36th * rho * 0.;
        gridBuffer[CurrentCell].northSW = gridBuffer[CurrentCell].northNE + 6. * one36th * rho * 0.;

    }

    if (is_wall(normalizedGrayscale, id.xy)) {
        gridBuffer[CurrentCell].northN  = gridBuffer[CurrentCell].northS;
        gridBuffer[CurrentCell].northNE = gridBuffer[CurrentCell].northSE;

        gridBuffer[CurrentCell].northE  = gridBuffer[CurrentCell].northW;
        gridBuffer[CurrentCell].northSE = gridBuffer[CurrentCell].northNE;

        gridBuffer[CurrentCell].northS  = gridBuffer[CurrentCell].northN;
        gridBuffer[CurrentCell].northSW = gridBuffer[CurrentCell].northNW;

        gridBuffer[CurrentCell].northW  = gridBuffer[CurrentCell].northE;
        gridBuffer[CurrentCell].northNW = gridBuffer[CurrentCell].northSW;
        //rho = 0.;
    }
    
    
    //density 
    float rhoDens = rho + norm * rho / 2.;

    Velocities[id.xy] = float4(xVel, yVel, norm, rhoDens);

    float3 colorVel;
    if (is_wall(normalizedGrayscale, id.xy)) {
        colorVel.xyz = float3(xVel, yVel, 0);
       
    }
    else {
        float contrast = 2 * pow(1.2, _Contrast) + .5;
        float normal_value = norm + 91. * contrast;
        normal_value = normal_value / .2;

        if (normal_value < 0.0) normal_value = 0.0;
        if (normal_value > 1.0) normal_value = 1.0;

        float v1 = 1.0 / 7.0;
        float v2 = 2.0 / 7.0;
        float v3 = 3.0 / 7.0;
        float v4 = 4.0 / 7.0;
        float v5 = 5.0 / 7.0;
        float v6 = 6.0 / 7.0;
        //compute color
        if (normal_value < v1)
        {
            float c = normal_value / v1;
            colorVel.x = 70. * (1. - c);
            colorVel.y = 70. * (1. - c);
            colorVel.z = 219. * (1. - c) + 91. * c;
        }
        else if (normal_value < v2)
        {
            float c = (normal_value - v1) / (v2 - v1);
            colorVel.x = 0.;
            colorVel.y = 255. * c;
            colorVel.z = 91. * (1. - c) + 255. * c;
        }
        else if (normal_value < v3)
        {
            float c = (normal_value - v2) / (v3 - v2);
            colorVel.x = 0. * c;
            colorVel.y = 255. * (1. - c) + 128. * c;
            colorVel.z = 255. * (1. - c) + 0. * c;
        }
        else if (normal_value < v4)
        {
            float c = (normal_value - v3) / (v4 - v3);
            colorVel.x = 255. * c;
            colorVel.y = 128. * (1. - c) + 255. * c;
            colorVel.z = 0.;
        }
        else if (normal_value < v5)
        {
            float c = (normal_value - v4) / (v5 - v4);
            colorVel.x = 255. * (1. - c) + 255. * c;
            colorVel.y = 255. * (1. - c) + 96. * c;
            colorVel.z = 0.;
        }
        else if (normal_value < v6)
        {
            float c = (normal_value - v5) / (v6 - v5);
            colorVel.x = 255. * (1. - c) + 107. * c;
            colorVel.y = 96. * (1. - c);
            colorVel.z = 0.;
        }
        else
        {
            float c = (normal_value - v6) / (1. - v6);
            colorVel.x = 107. * (1. - c) + 223. * c;
            colorVel.y = 77. * c;
            colorVel.z = 77. * c;
           
        }
      
    }

    float4 res = float4((colorVel.r / 255), (colorVel.g / 255), (colorVel.b / 255), 1.0);
     
    Result[id.xy] = res;

       
}


// Hash function from H. Schechter & R. Bridson, goo.gl/RXiKaH
uint Hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

float Random(uint seed)
{
    return float(Hash(seed)) / 4294967295.0; // 2^32-1
}
float amplitude;

[numthreads(64, 1, 1)]
void Tracers(uint3 id : SV_DispatchThreadID)
{  
    //TODO give buffer to obstacles so traces dont pass through
    int Height;
    int Width;
    HeightTexture.GetDimensions(Height, Width);

    VelocityData particle = VelocitiesBuffer[id.x];  
    float2 offset = float2(1. , 0);
       
    float2 pos = particle.origin;
    float2 direction = Velocities[pos].xy * 2. - 1.;   
    pos += direction * amplitude;
    float mag = sqrt(dot(direction, direction));
    if (mag < .002) {
        pos.x = 0; 
    }
    //pos += vel * amplitude;
    
    if (pos.x > Height) { pos.x = 0; pos.y = Random(id.x) * Height; }
    
    /*pos.x = mod(pos.x, Width - 1);
    pos.y = mod(pos.y, Height - 1);*/

    VelocitiesBuffer[id.x].origin = pos;
  
    HeightTexture[pos] = float4(1,1,1, 1);
             
}
[numthreads(8, 8, 1)]
void CSClear(uint3 id : SV_DispatchThreadID)
{
    HeightTexture[id.xy] = float4(0, 0, 0, 1);
}
